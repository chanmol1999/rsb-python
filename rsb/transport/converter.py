# ============================================================
#
# Copyright (C) 2010 by Johannes Wienke <jwienke at techfak dot uni-bielefeld dot de>
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation;
# either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# ============================================================

class Converter(object):
    """
    Base class for converters to a certain target type.
    
    @author: jwienke
    """

    def __init__(self, sourceType, targetType):
        """
        Constructor.
        
        @type targetType: python type identifier
        @param targetType: data type generated by the converter
        """

        self.__sourceType = sourceType
        self.__targetType = targetType

    def getSourceType(self):
        return self.__sourceType

    def getTargetType(self):
        return self.__targetType

    def _serialize(self, input):
        raise NotImplementedError()

    def serialize(self, input):
        converted = self._serialize(input)
        assert(type(converted) == self.__targetType)
        return converted

    def deserialize(self, input):
        raise NotImplementedError()

class UnknownConverterError(KeyError):
    """
    Raised if a converter for a target type is not available.
    
    @author: jwienke
    """

    def __init__(self, sourceType, targetType):
        KeyError.__init__(self, "No converter from type %s to type %s available" % (sourceType, targetType))

class ConverterMap(object):
    """
    A class managing converters for for a certain target type.
    
    @author: jwienke
    """

    def __init__(self, targetType):
        self.__targetType = targetType
        self.__converters = {}

    def getTargetType(self):
        return self.__targetType

    def addConverter(self, converter, override=False):
        if converter.getSourceType() in self.__converters and not override:
            raise RuntimeError("There already is a converter with source type '%s'" % converter.getSourceType())
        self.__converters[converter.getSourceType()] = converter

    def hasConverter(self, sourceType):
        return sourceType in self.__converters

    def getConverter(self, sourceType):
        return self.__converters[sourceType]

    def __str__(self):
        s = "ConverterMap(targetType = %s):\n" % self.__targetType
        for sourceType in self.__converters:
            s = s + ("\t%s -> %s\n" % (sourceType, self.__converters[sourceType]))
        return s[:-1]

__globalConverterMaps = {}

def registerGlobalConverter(converter, override=False):
    """
    Registers a new converter that s globally available to the system.
    
    @param converter: converter to register
    """
    if not converter.getTargetType() in __globalConverterMaps:
        __globalConverterMaps[converter.getTargetType()] = ConverterMap(converter.getTargetType())
    __globalConverterMaps[converter.getTargetType()].addConverter(converter, override)

def getGlobalConverterMap(targetType):
    """
    Get a map with all globally known converters for the desired target
    serialization type.
    
    @param targetType: python type for target serialization
    @return: converter map constantly updated
    """

    if not targetType in __globalConverterMaps:
        __globalConverterMaps[targetType] = ConverterMap(targetType)
    return __globalConverterMaps[targetType]

# --- converters with str as serialization type ---

class StringConverter(Converter):
    """
    An adapter to serialize strings to strings. ;)
    
    @author: jwienke
    """
    
    def __init__(self):
        Converter.__init__(self, "string", str)

    def _serialize(self, input):
        return str(input)

    def deserialize(self, input):
        return str(input)
    
registerGlobalConverter(StringConverter())